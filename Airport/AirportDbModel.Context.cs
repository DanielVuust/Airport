//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Airport
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class AirportDbEntities1 : DbContext
    {
        public AirportDbEntities1()
            : base("name=AirportDbEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AirPort> AirPorts { get; set; }
        public DbSet<Company> Companies { get; set; }
        public DbSet<Plane> Planes { get; set; }
        public DbSet<Route> Routes { get; set; }
        public DbSet<Airport_Route> Airport_Route { get; set; }
    
        public virtual int CreateNewAirport(string iATA, string airportName, string airportAddress)
        {
            var iATAParameter = iATA != null ?
                new ObjectParameter("IATA", iATA) :
                new ObjectParameter("IATA", typeof(string));
    
            var airportNameParameter = airportName != null ?
                new ObjectParameter("AirportName", airportName) :
                new ObjectParameter("AirportName", typeof(string));
    
            var airportAddressParameter = airportAddress != null ?
                new ObjectParameter("AirportAddress", airportAddress) :
                new ObjectParameter("AirportAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewAirport", iATAParameter, airportNameParameter, airportAddressParameter);
        }
    
        public virtual int CreateNewCompany(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateNewCompany", companyNameParameter);
        }
    
        public virtual ObjectResult<CreateRouteAndAssignOwner_Result> CreateRouteAndAssignOwner(string companyId, string routeStartIATA, string routeEndDestinationIATA)
        {
            var companyIdParameter = companyId != null ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(string));
    
            var routeStartIATAParameter = routeStartIATA != null ?
                new ObjectParameter("RouteStartIATA", routeStartIATA) :
                new ObjectParameter("RouteStartIATA", typeof(string));
    
            var routeEndDestinationIATAParameter = routeEndDestinationIATA != null ?
                new ObjectParameter("RouteEndDestinationIATA", routeEndDestinationIATA) :
                new ObjectParameter("RouteEndDestinationIATA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateRouteAndAssignOwner_Result>("CreateRouteAndAssignOwner", companyIdParameter, routeStartIATAParameter, routeEndDestinationIATAParameter);
        }
    }
}
